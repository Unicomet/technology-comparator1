import { createStep, createWorkflow } from "@mastra/core";
import z from "zod";
import { techComparatorAgent } from "../agents/tech-comparator-agent";
import { reflectionAgent } from "../agents/reflection-agent";
import { RuntimeContext } from "@mastra/core/runtime-context";
import { researchAgent } from "../agents/research-agent";
import { webSearchTool } from "../tools/web-search-tool";
import { webSearchScorer } from "../../../scorers/webSearchScorer";

type CompareTechRuntimeContext = {
  userRequest: string;
  comparisonTable: string;
  searchResults: string;
  conclusion: string;
};
const runtimeContext = new RuntimeContext<CompareTechRuntimeContext>();

const research = createStep({
  id: "research",
  inputSchema: z.object({
    userRequest: z
      .string()
      .describe(
        "The user's request describing the type of technology products to compare."
      ),
  }),
  scorers: {
    webSearchScorer: {
      scorer: webSearchScorer,
      sampling: {
        type: "ratio",
        rate: 1.0,
      },
    },
  },
  outputSchema: z.object({
    searchResults: z
      .array(
        z.object({
          title: z.string().describe("The title of the web result."),
          content: z.string().describe("The content of the web result."),
          url: z.string().describe("The URL of the web result."),
        })
      )
      .describe("The gathered information from the web search."),
  }),
  execute: async ({ inputData }) => {
    if (!inputData) {
      throw new Error("No input data provided");
    }
    runtimeContext.set("userRequest", inputData.userRequest);

    const queries = await researchAgent.generate(
      "Based on the user's request, generate relevant web search queries.",
      {
        runtimeContext,
        structuredOutput: {
          schema: z.object({
            queries: z
              .array(z.string())
              .max(3)
              .describe("A list of web search queries to perform."),
          }),
        },
      }
    );

    if (queries.object.queries.length === 0) {
      throw new Error("No queries generated by the research agent");
    }

    const webResults = [];

    for (const query of queries.object.queries) {
      const webResult = await webSearchTool.execute({
        context: { query },
        runtimeContext,
      });

      webResults.push(...webResult);
    }
    console.log("Search queries", webResults);

    return {
      searchResults: webResults,
    };
  },
});

const analyzeAndCompare = createStep({
  id: "research-and-compare",
  inputSchema: z.object({
    searchResults: z
      .array(
        z.object({
          title: z.string().describe("The title of the web result."),
          content: z.string().describe("The content of the web result."),
          url: z.string().describe("The URL of the web result."),
        })
      )
      .max(3)
      .describe("The gathered information from the web search."),
  }),
  outputSchema: z.object({
    comparisonTable: z
      .string()
      .describe("A table comparing the different technology products."),
    conclusion: z.string().describe("A conclusion based on the comparison."),
  }),
  execute: async ({ inputData }) => {
    if (!inputData) {
      throw new Error("No input data provided");
    }

    console.log("RuntimeContext (Research):", runtimeContext);

    console.log("Input Data (Analyze and Compare):", inputData.searchResults);

    const formattedSearchResults = inputData.searchResults
      .map(
        (result, index) => `${index + 1}. ${result.title}\n${result.content}`
      )
      .join("\n\n");

    runtimeContext.set("searchResults", formattedSearchResults);

    const response = await techComparatorAgent.generate(
      ["Analyze and compare technology products based on the search results."],
      {
        runtimeContext,
        structuredOutput: {
          schema: z.object({
            comparisonTable: z
              .string()
              .describe("A table comparing the different technology products."),
            conclusion: z
              .string()
              .describe("A conclusion based on the comparison."),
          }),
        },
      }
    );

    runtimeContext.set("comparisonTable", response.object.comparisonTable);
    runtimeContext.set("conclusion", response.object.conclusion);

    return {
      comparisonTable: response.object.comparisonTable,
      conclusion: response.object.conclusion,
    };
  },
});

const reflection = createStep({
  id: "reflection",
  inputSchema: z.object({
    comparisonTable: z
      .string()
      .describe("A table comparing the different technology products."),
    conclusion: z.string().describe("A conclusion based on the comparison."),
  }),
  outputSchema: z.object({
    comparisonTable: z
      .string()
      .describe("A table comparing the different technology products."),
    conclusion: z.string().describe("A conclusion based on the comparison."),
  }),
  execute: async ({ inputData, runtimeContext }) => {
    if (!inputData) {
      throw new Error("No input data provided");
    }

    console.log("RuntimeContext (Reflection):", runtimeContext);

    const response = await reflectionAgent.generate("Do reflection", {
      runtimeContext,
      structuredOutput: {
        schema: z.object({
          insights: z.string().describe("The insights from the reflection."),
          comparisonTable: z
            .string()
            .describe("The revised comparison table in Markdown format."),
          conclusion: z.string().describe("The revised conclusion."),
        }),
      },
    });

    const userRequest: string = runtimeContext.get("userRequest");

    return {
      comparisonTable: response.object.comparisonTable,
      conclusion: response.object.conclusion,
      insights: response.object.insights,
    };
  },
});

const compareTechWorkflow = createWorkflow({
  id: "compare-tech-workflow",
  description:
    "A workflow to compare different technology products based on user requirements.",
  inputSchema: z.object({
    userRequest: z
      .string()
      .describe(
        "The user's request describing the type of technology products to compare."
      ),
  }),
  outputSchema: z.object({
    comparisonTable: z
      .string()
      .describe("A table comparing the different technology products."),
    conclusion: z.string().describe("A conclusion based on the comparison."),
  }),
})
  .then(research)
  .then(analyzeAndCompare)
  .then(reflection)
  .commit();

export { compareTechWorkflow };
